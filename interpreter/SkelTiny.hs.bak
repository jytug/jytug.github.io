module SkelTiny where

-- Haskell module generated by the BNF converter

import AbsTiny
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProg :: Prog -> Result
transProg x = case x of
  Program stms -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ENum integer -> failure x
  EVar ident -> failure x
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
transBExp :: BExp -> Result
transBExp x = case x of
  BTrue -> failure x
  BFalse -> failure x
  BLeq exp1 exp2 -> failure x
  BNeg bexp -> failure x
  BAnd bexp1 bexp2 -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SSkip -> failure x
  SAss ident exp -> failure x
  SIfel bexp stm1 stm2 -> failure x
  SWhile bexp stm -> failure x
  SPrint exp -> failure x
  SBlock stms -> failure x

