-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParTiny where
import AbsTiny
import LexTiny
import ErrM

}

%name pProg Prog
%name pExp2 Exp2
%name pExp Exp
%name pExp1 Exp1
%name pBExp BExp
%name pStm Stm
%name pListStm ListStm
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  '-' { PT _ (TS _ 5) }
  ':=' { PT _ (TS _ 6) }
  ';' { PT _ (TS _ 7) }
  '<=' { PT _ (TS _ 8) }
  'and' { PT _ (TS _ 9) }
  'begin' { PT _ (TS _ 10) }
  'do' { PT _ (TS _ 11) }
  'else' { PT _ (TS _ 12) }
  'end' { PT _ (TS _ 13) }
  'false' { PT _ (TS _ 14) }
  'if' { PT _ (TS _ 15) }
  'not' { PT _ (TS _ 16) }
  'print' { PT _ (TS _ 17) }
  'skip' { PT _ (TS _ 18) }
  'then' { PT _ (TS _ 19) }
  'true' { PT _ (TS _ 20) }
  'while' { PT _ (TS _ 21) }

L_integ  { PT _ (TI $$) }
L_ident  { PT _ (TV $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Ident   :: { Ident }   : L_ident  { Ident $1 }

Prog :: { Prog }
Prog : Stm { AbsTiny.Program $1 }
Exp2 :: { Exp }
Exp2 : Integer { AbsTiny.ENum $1 }
     | Ident { AbsTiny.EVar $1 }
     | '(' Exp ')' { $2 }
Exp :: { Exp }
Exp : Exp '+' Exp1 { AbsTiny.EAdd $1 $3 }
    | Exp '-' Exp1 { AbsTiny.ESub $1 $3 }
    | Exp1 { $1 }
Exp1 :: { Exp }
Exp1 : Exp1 '*' Exp2 { AbsTiny.EMul $1 $3 } | Exp2 { $1 }
BExp :: { BExp }
BExp : 'true' { AbsTiny.BTrue }
     | 'false' { AbsTiny.BFalse }
     | Exp '<=' Exp { AbsTiny.BLeq $1 $3 }
     | 'not' BExp { AbsTiny.BNeg $2 }
     | BExp 'and' BExp { AbsTiny.BAnd $1 $3 }
Stm :: { Stm }
Stm : 'skip' { AbsTiny.SSkip }
    | Ident ':=' Exp { AbsTiny.SAss $1 $3 }
    | 'if' BExp 'then' Stm 'else' Stm { AbsTiny.SIfel $2 $4 $6 }
    | 'while' BExp 'do' Stm { AbsTiny.SWhile $2 $4 }
    | 'print' Exp { AbsTiny.SPrint $2 }
    | 'begin' ListStm 'end' { AbsTiny.SBlock $2 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] }
        | Stm { (:[]) $1 }
        | Stm ';' ListStm { (:) $1 $3 }
        | {- empty -} { [] }
        | Stm ListStm { (:) $1 $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

